name: 'Checkmarx AccuKnox Integration'
description: 'Fetches Checkmarx results and uploads them to AccuKnox Console'
inputs:
  api_key:
    description: 'Checkmarx API key'
    required: true
  project_name:
    description: 'Checkmarx project name'
    required: true
  accuknox_endpoint:
    description: 'AccuKnox API endpoint URL to upload the scan results.'
    required: true
  tenant_id:
    description: 'Unique ID of the tenant for AccuKnox Console.'
    required: true
  ak_token:
    description: 'Token for authenticating with AccuKnox Console.'
    required: true
  label_id:
    description: 'Label in AccuKnox Console for tagging scan results.' 
    required: true
  main_branch:
    description: 'Fetch results from Main branch. By default, it fetches results from most recent branch that was scanned.'
    required: false
    default: 'false'
  upload_artifact:
    description: 'Whether to upload scan results as a GitHub artifact'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Run Checkmarx fetch job
      run: |
        CMD="docker run --rm \
          -e API_KEY=${{ inputs.api_key }} \
          -e PROJECT_NAME='${{ inputs.project_name }}' \
          -e REPORT_PATH='/app/data/'"
          
        if [[ "${{ inputs.main_branch }}" == "true" ]]; then
          CMD="$CMD -e MAIN_BRANCH=true"
        fi

        CMD="$CMD -v '${{ github.workspace }}:/app/data/' accuknox/checkmarx-one-job:1.0"
        eval "$CMD"
      shell: bash

    - name: Upload results to AccuKnox
      run: |
        file=$(ls CHECKMARX-*.json | head -n1)
        RESPONSE=$(curl --location "https://${{ inputs.accuknox_endpoint }}/api/v1/artifact/?tenant_id=${{ inputs.tenant_id }}&data_type=CX&save_to_s3=true&label_id=${{ inputs.label_id }}" \
          --header "Tenant-Id: ${{ inputs.tenant_id }}" \
          --header "Authorization: Bearer ${{ inputs.ak_token }}" \
          --form "file=@$file")
        echo "Response: $RESPONSE"
        if [[ "$RESPONSE" != *"File received successfully"* ]]; then
           echo "Error: Failed to push report to control plane"
          exit 1
        fi
      shell: bash

    - name: Upload Scan Results as Artifact
      if: inputs.upload_artifact == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: checkmarx-scan-results
        path: CHECKMARX-*.json
        if-no-files-found: ignore

branding:
  icon: "shield"
  color: "green"
